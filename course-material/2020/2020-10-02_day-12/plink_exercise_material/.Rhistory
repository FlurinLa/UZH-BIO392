### plot probe and segment data by chromosome and positions.
### Hint: Use help() to understand how to use the function plotSample().
plot(segment.smoothed.CNA.object, plot.type="w")
### plot with separate chromosomes with same method plotSample() but different "plot.type".
plot(segment.smoothed.CNA.object, plot.type="c")
### plot with x position ordered by segment values with same method plotSample() but different "plot.type".
plot(segment.smoothed.CNA.object, plot.type="p")
### plot with separate chromosomes with same method plotSample() but different "plot.type".
par(mfrow=c(4,5))
plot(segment.smoothed.CNA.object, plot.type="c")
### plot with separate chromosomes with same method plotSample() but different "plot.type".
plot(segment.smoothed.CNA.object, plot.type="c")
plotSample(segment.smoothed.CNA.object, xmaploc = TRUE)
### plot with separate chromosomes with same method plotSample() but different "plot.type".
plotSample(segment.smoothed.CNA.object, plot.type="c")
### plot with x position ordered by segment values with same method plotSample() but different "plot.type".
plotSample(segment.smoothed.CNA.object, plot.type="p")
?segment
segment.smoothed.CNA.object <- segment(smoothed.CNA.object,
undo.splits="sdundo",
undo.SD=3,verbose=1)
### Create a ‘copy number array’ data object from the data table Coriell05296
### Hint: Use help() to understand how to use the function CNA().
help(CNA)
smooth.CNA
### Create a ‘copy number array’ data object from the data table Coriell05296
### Hint: Use help() to understand how to use the function CNA().
help(CNA)
CNA.object <- CNA(Coriell05296$Value,
Coriell05296$Chromosome,Coriell05296$Position,
data.type="logratio",sampleid="c05296")
### Smoothen the data by outlier deletion
### Hint: Use help() to understand how to use the function smooth.CNA()
smoothed.CNA.object <- smooth.CNA(CNA.object, smooth.region=10, outlier.SD.scale=4)
help(segment)
### Segmentation step
### Hint: Use help() to understand how to use the function segment()
### What does different parameters imply?
segment.smoothed.CNA.object <- segment(smoothed.CNA.object, undo.splits = 'none', verbose=1)
segment.smoothed.CNA.object$output
### Now the segmentation algorithm has finished with our paramter "smooth.region" as 10 and "outlier.SD.scale" as 4.
### What is the segmentation output?
### Hint: type "segment.smoothed.CNA.object$" in the console and hit Tab key to see what prompts.
### Hint: you can also check in the "Environment" window and open the variable "segment.smoothed.CNA.object" to see its content.
seg_out = segment.smoothed.CNA.object$output
head(seg_out)
### What does each column mean?
#### "num.mark" is number of probes contained by the segment
nrow(seg_out)
### do a simple scatter plot with "chrom" as x and "seg.mean" as y
plot(seg_out$chrom, seg_out$seg.mean)
### use table() to check how many segments each chromosome has
table(seg_out$chrom)
### change parameters for smoothing and for segmentation and see if the number of segments change
### and check with plot() or table()
### e.g. for smoothing: "smooth.region" as 20 and "outlier.SD.scale" as 8.
### e.g. for segmentation: "undo.splits" as "sdundo", "undo.SD" as 3 and "verbose" as 1
smoothed.CNA.object <- smooth.CNA(CNA.object, smooth.region=20, outlier.SD.scale=8)
segment.smoothed.CNA.object <- segment(smoothed.CNA.object, verbose=1)
seg_out <- segment.smoothed.CNA.object$output
nrow(seg_out)
table(seg_out$chrom)
### do a simple scatter plot with "chrom" as x and "seg.mean" as y
plot(seg_out$chrom, seg_out$seg.mean)
smoothed.CNA.object <- smooth.CNA(CNA.object, smooth.region=10, outlier.SD.scale=4)
segment.smoothed.CNA.object <- segment(smoothed.CNA.object,
undo.splits="sdundo",
undo.SD=3,verbose=1)
seg_out <- segment.smoothed.CNA.object$output
nrow(seg_out)
table(seg_out$chrom)
### do a simple scatter plot with "chrom" as x and "seg.mean" as y
plot(seg_out$chrom, seg_out$seg.mean)
### The DNAcopy library also has some nice plotting tools to easily visualize this segmentation.
### plot probe and segment data by chromosome and positions.
### Hint: Use help() to understand how to use the function plotSample().
plot(segment.smoothed.CNA.object, plot.type="w")
### plot with separate chromosomes with same method plotSample() but different "plot.type".
plot(segment.smoothed.CNA.object, plot.type="c")
### plot with x position ordered by segment values with same method plotSample() but different "plot.type".
plot(segment.smoothed.CNA.object, plot.type="p")
# code based on https://www.biostars.org/p/347796/
# load libraries
library(dplyr)
library(ggplot2)
#' @title plotPairwiseLD
#' @description Plots R2 heatmap across the chromosome (like Haploview)
#' @param dfr A data.frame with minimum CHROM_A, BP_A, CHROM_B, BP_B and R2.
#' An output from tomahawk works.
#' @param chr A chromosome name.
#' @param xlim A two number vector specifying min and max x-axis limits. Any one or both can be defaulted by specifying NA.
#' @param ylim A two number vector specifying min and max y-axis limits. Any one or both can be defaulted by specifying NA.
#' @param minr2 A value between 0 and 1. All SNPs with R2 value below this
#' value is excluded from plot.
#'
plotPairwiseLD <- function(dfr,chr,xlim=c(NA,NA),ylim=c(NA,NA),minr2, xbreaks, title) {
if(missing(dfr)) stop("Input data.frame 'dfr' missing.")
if(!missing(chr)) {
ld <- filter(ld,CHROM_A==get("chr") & CHROM_B==get("chr"))
}
ld <- filter(ld,BP_A<BP_B)
if(!missing(minr2)) {
ld <- filter(ld,R2>get("minr2"))
}
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
ld <- ld %>% arrange(R2)
ld$x <- ld$BP_A+((ld$BP_B-ld$BP_A)/2)
ld$y <- (ld$BP_B-ld$BP_A)
ld$r2c <- cut(ld$R2,breaks=seq(0,1,0.2),labels=c("0-0 - 0.2","0.2 - 0.4",
"0.4 - 0.6","0.6 - 0.8",
"0.8 - 1.0"))
ld$r2c <- factor(ld$r2c,levels=rev(c("0-0 - 0.2","0.2 - 0.4",
"0.4 - 0.6","0.6 - 0.8",
"0.8 - 1.0")))
if(!missing(xbreaks)) {
x_break_vector <- round(seq(min(ld$x), max(ld$x), length = xbreaks)/10) *10
} else {
x_break_vector <- waiver()
}
ggplot(ld,aes(x=x,y=y,col=r2c))+
geom_point(shape=20,size=0.1,alpha=0.8)+
scale_color_manual(values=c("#ca0020","#f4a582","#d1e5f0","#67a9cf","#2166ac"))+
scale_x_continuous(limits=xlim, breaks = x_break_vector)+
scale_y_continuous(limits=ylim)+
guides(colour=guide_legend(title="R2",override.aes=list(shape=20,size=8)))+
labs(x="Chromosome position (KBp)",y="Distance (KBp)")+
theme_bw(base_size=14)+
theme(panel.border=element_blank(),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
ggtitle(title) %>%
return()
}
#' @description Plots R2 heatmap across the chromosome (like Haploview)
#' @param dfr A data.frame with minimum CHROM_A, BP_A, CHROM_B, BP_B and R2.
#' An output from tomahawk works.
#' @param chr A chromosome name.
#' @param xlim A two number vector specifying min and max x-axis limits. Any one or both can be defaulted by specifying NA.
#' @param ylim A two number vector specifying min and max y-axis limits.  Any one or both can be defaulted by specifying NA.
#' @param avgwin An integer specifying window size. Mean R2 is computed within windows.
#' @param minr2 A value between 0 and 1. All SNPs with R2 value below this
#' value is excluded from plot.
#'
plotDecayLD <- function(dfr,chr,xlim=c(NA,NA),ylim=c(NA,NA),avgwin=0,minr2, title) {
if(missing(dfr)) stop("Input data.frame 'dfr' missing.")
if(!missing(chr)) {
ld <- filter(ld,CHROM_A==get("chr") & CHROM_B==get("chr"))
}
ld <- filter(ld,BP_A<BP_B)
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
if(!missing(minr2)) {
ld <- filter(ld,R2>get("minr2"))
}
ld <- ld %>% arrange(R2)
ld$dist <- ld$BP_B-ld$BP_A
if(avgwin>0) {
ld$distc <- cut(ld$dist,breaks=seq(from=min(ld$dist),to=max(ld$dist),length.out =avgwin))
ld <- ld %>% group_by(distc) %>% summarise(dist=mean(dist),R2=mean(R2))
}
ggplot(ld,aes(x=dist,y=R2))+
geom_point(shape=20,size=0.15,alpha=0.7)+
geom_smooth()+
scale_x_continuous(limits=xlim)+
scale_y_continuous(limits=ylim)+
labs(x="Distance (KBp)",y=expression(LD~(r^{2})))+
theme_bw(base_size=14)+
theme(panel.border=element_blank(),
axis.ticks=element_blank()) +
ggtitle(title)%>%
return()
}
library(readr)
system('plink --vcf --r2 --ld-window-r2 0')
setwd('/Users/qingyao/teaching2020/UZH-BIO392/course-material/2020/2020-10-02_day-12/plink-genetics')
system('./plink --vcf --r2 --ld-window-r2 0')
system('./plink --vcf chr20.chunk1.afr.1kg.all.vcf.gz --r2 dprime --ld-window-r2 0 --out afr')
system('./plink --gzvcf chr20.chunk1.afr.1kg.all.vcf.gz --r2 dprime --ld-window-r2 0 --out afr')
system('./plink --vcfgz chr20.chunk1.afr.1kg.all.vcf.gz --r2 dprime --ld-window-r2 0 --out afr')
ld <- read_table2("~/sibling.ld")
ld <- read_table2("sibling.ld")
ld$X8 <- NULL
ld$dist <- ld$BP_B - ld$BP_A
ld$mid <- (ld$BP_A + ld$BP_B)/2
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80)
ld <- read_table2("sibling.ld")
ld$X8 <- NULL
ld$dist <- ld$BP_B - ld$BP_A
ld$mid <- (ld$BP_A + ld$BP_B)/2
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80)
#' @title plotPairwiseLD
#' @description Plots R2 heatmap across the chromosome (like Haploview)
#' @param dfr A data.frame with minimum CHROM_A, BP_A, CHROM_B, BP_B and R2.
#' An output from tomahawk works.
#' @param chr A chromosome name.
#' @param xlim A two number vector specifying min and max x-axis limits. Any one or both can be defaulted by specifying NA.
#' @param ylim A two number vector specifying min and max y-axis limits. Any one or both can be defaulted by specifying NA.
#' @param minr2 A value between 0 and 1. All SNPs with R2 value below this
#' value is excluded from plot.
#'
plotPairwiseLD <- function(dfr,chr,xlim=c(NA,NA),ylim=c(NA,NA),minr2, xbreaks, title) {
if(missing(dfr)) stop("Input data.frame 'dfr' missing.")
if(!missing(chr)) {
ld <- filter(ld,CHROM_A==get("chr") & CHROM_B==get("chr"))
}
ld <- filter(ld,BP_A<BP_B)
if(!missing(minr2)) {
ld <- filter(ld,R2>get("minr2"))
}
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
ld <- ld %>% arrange(R2)
ld$x <- ld$BP_A+((ld$BP_B-ld$BP_A)/2)
ld$y <- (ld$BP_B-ld$BP_A)
ld$r2c <- cut(ld$R2,breaks=seq(0,1,0.2),labels=c("0-0 - 0.2","0.2 - 0.4",
"0.4 - 0.6","0.6 - 0.8",
"0.8 - 1.0"))
ld$r2c <- factor(ld$r2c,levels=rev(c("0-0 - 0.2","0.2 - 0.4",
"0.4 - 0.6","0.6 - 0.8",
"0.8 - 1.0")))
if(!missing(xbreaks)) {
x_break_vector <- round(seq(min(ld$x), max(ld$x), length = xbreaks)/10) *10
} else {
x_break_vector <- waiver()
}
ggplot(ld,aes(x=x,y=y,col=r2c))+
geom_point(shape=20,size=0.1,alpha=0.8)+
scale_color_manual(values=c("#ca0020","#f4a582","#d1e5f0","#67a9cf","#2166ac"))+
scale_x_continuous(limits=xlim, breaks = x_break_vector)+
scale_y_continuous(limits=ylim)+
guides(colour=guide_legend(title="R2",override.aes=list(shape=20,size=8)))+
labs(x="Chromosome position (KBp)",y="Distance (KBp)")+
theme_bw(base_size=14)+
theme(panel.border=element_blank(),
axis.ticks=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
ggtitle(title) %>%
return()
}
#' @description Plots R2 heatmap across the chromosome (like Haploview)
#' @param dfr A data.frame with minimum CHROM_A, BP_A, CHROM_B, BP_B and R2.
#' An output from tomahawk works.
#' @param chr A chromosome name.
#' @param xlim A two number vector specifying min and max x-axis limits. Any one or both can be defaulted by specifying NA.
#' @param ylim A two number vector specifying min and max y-axis limits.  Any one or both can be defaulted by specifying NA.
#' @param avgwin An integer specifying window size. Mean R2 is computed within windows.
#' @param minr2 A value between 0 and 1. All SNPs with R2 value below this
#' value is excluded from plot.
#'
plotDecayLD <- function(dfr,chr,xlim=c(NA,NA),ylim=c(NA,NA),avgwin=0,minr2, title) {
if(missing(dfr)) stop("Input data.frame 'dfr' missing.")
if(!missing(chr)) {
ld <- filter(ld,CHROM_A==get("chr") & CHROM_B==get("chr"))
}
ld <- filter(ld,BP_A<BP_B)
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
if(!missing(minr2)) {
ld <- filter(ld,R2>get("minr2"))
}
ld <- ld %>% arrange(R2)
ld$dist <- ld$BP_B-ld$BP_A
if(avgwin>0) {
ld$distc <- cut(ld$dist,breaks=seq(from=min(ld$dist),to=max(ld$dist),length.out =avgwin))
ld <- ld %>% group_by(distc) %>% summarise(dist=mean(dist),R2=mean(R2))
}
ggplot(ld,aes(x=dist,y=R2))+
geom_point(shape=20,size=0.15,alpha=0.7)+
geom_smooth()+
scale_x_continuous(limits=xlim)+
scale_y_continuous(limits=ylim)+
labs(x="Distance (KBp)",y=expression(LD~(r^{2})))+
theme_bw(base_size=14)+
theme(panel.border=element_blank(),
axis.ticks=element_blank()) +
ggtitle(title)%>%
return()
}
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80)
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay sibling')
start = 2 * 10^6
end = 3 * 10^6
ld <- read_table2("~/data/ALL.maf.ld")
ld <- read_table2("ALL.maf.ld")
dir.create('out')
pdf('out/ALL.maf.decay.pdf', width = 6, height = 5)
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
dev.off()
ld <- ld %>% filter(BP_A > start  & BP_A < end  & ld$BP_B > start  & ld$BP_B < end )
pdf('out/ALL.maf.ld.pdf', width = 18, height = 5)
plotPairwiseLD(ld ,ylim=c(0,300), xbreaks = 10, title = 'LD plot All') #,minr2=0.2
dev.off()
ld <- read_table2("han.maf.ld")
pdf('out/han.maf.decay.pdf', width = 6, height = 5)
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay Han Chinese')
dev.off()
ld <- ld %>% filter(BP_A > start  & BP_A < end  & ld$BP_B > start  & ld$BP_B < end )
pdf('out/han.maf.ld.pdf', width = 18, height = 5)
plotPairwiseLD(ld ,ylim=c(0,300), xbreaks = 10,  title = 'LD plot Han Chiense') #,minr2=0.2
dev.off()
ld <- read_table2("afr.maf.ld")
pdf('out/afr.maf.decay.pdf', width = 6, height = 5)
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay African')
dev.off()
ld <- ld %>% filter(BP_A > start  & BP_A < end  & ld$BP_B > start  & ld$BP_B < end )
pdf('out/afr.maf.ld.pdf', width = 18, height = 5)
plotPairwiseLD(ld ,ylim=c(0,300), xbreaks = 10, title = 'LD plot Arican') #,minr2=0.2
dev.off()
library(readr)
HAN <- read_table2("plink-genetics/HAN.frq")
HAN <- read_table2("HAN.frq")
AFR <- read_table2("AFR.frq")
ALL <- read_table2("ALL.frq")
n = nrow(ALL)
df <- data.frame(MAF = c(ALL$MAF, AFR$MAF, HAN$MAF), Population = c(rep('ALL', n), rep('AFR',n), rep('HAN',n)))
df$Population <- factor(df$Population, levels = c('ALL', 'AFR', 'HAN'))
ggplot(df, aes(x=MAF, fill=Population)) +
geom_histogram() + facet_grid(.~Population)
n
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/500k/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
?arrange
if(missing(dfr)) stop("Input data.frame 'dfr' missing.")
if(!missing(chr)) {
ld <- filter(ld,CHROM_A==get("chr") & CHROM_B==get("chr"))
}
ld <- filter(ld,BP_A<BP_B)
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
if(!missing(minr2)) {
ld <- filter(ld,R2>get("minr2"))
}
ld <- ld %>% arrange(R2)
ld$dist <- ld$BP_B-ld$BP_A
ggplot(ld,aes(x=dist,y=R2))+
geom_point(shape=20,size=0.15,alpha=0.7)+
geom_smooth()+
scale_x_continuous(limits=xlim)+
scale_y_continuous(limits=ylim)+
labs(x="Distance (KBp)",y=expression(LD~(r^{2})))+
theme_bw(base_size=14)+
theme(panel.border=element_blank(),
axis.ticks=element_blank()) +
ggtitle(title)%>%
return()
ggplot(ld,aes(x=dist,y=R2))+
geom_point(shape=20,size=0.15,alpha=0.7)+
geom_smooth()+
scale_x_continuous(limits=xlim)+
scale_y_continuous(limits=ylim)+
labs(x="Distance (KBp)",y=expression(LD~(r^{2})))+
theme_bw(base_size=14)+
theme(panel.border=element_blank(),
axis.ticks=element_blank())
ggplot(ld,aes(x=dist,y=R2))+
geom_point(shape=20,size=0.15,alpha=0.7)+
geom_smooth()
xlim
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/500k/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 20, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 50, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 100, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/500k/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 100, title = 'LD decay All')
View(ld)
ld <- read_table2('/Users/qingyao/Downloads/test/500k/plink.ld')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
ld <- read_table2('/Users/qingyao/Downloads/test/500k/plink.ld')
hist(ld$R2)
ld <- read_table2('/Users/qingyao/Downloads/test/500k/plink.ld')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
hist(ld$R2)
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay Han')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay Han')
ld <- read_table2('/Users/qingyao/Downloads/test/plink 2.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1)
, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 10, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 1000, title = 'LD decay All')
avg = 1000
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
ld <- ld %>% arrange(R2)
ld$dist <- ld$BP_B-ld$BP_A
ld$distc <- cut(ld$dist,breaks=seq(from=min(ld$dist),to=max(ld$dist),length.out =avgwin))
avg = 1000
ld$distc <- cut(ld$dist,breaks=seq(from=min(ld$dist),to=max(ld$dist),length.out =avgwin))
avgwin
avgwin=1000
ld$distc <- cut(ld$dist,breaks=seq(from=min(ld$dist),to=max(ld$dist),length.out =avgwin))
ld2=ld %>% group_by(distc) %>% summarise(dist=mean(dist),R2=mean(R2))
hist(ld$dist)
density(ld$dist)
plot(density(ld$dist))
ld[ld$dist>100,]
ld$BP_A
range(ld$BP_A)
hist(ld$BP_A)
ld[ld$dist>100,]
table(ld$distc)
ld[ld$dist>100,]
ld[ld$dist==100,]
ld[ld$dist>30,]
ld$BP_A
plot(ld$BP_A)
ld <- read_table2('/Users/qingyao/Downloads/test/plink 2.ld')
plot(ld$BP_A)
range(ld$BP_A)
ld$BP_A <- ld$BP_A/1000
range(ld$BP_A)
ld$BP_B <- ld$BP_B/1000
ld$dist <- ld$BP_B-ld$BP_A
ld$distc <- cut(ld$dist,breaks=seq(from=min(ld$dist),to=max(ld$dist),length.out =avgwin))
table(ld$distc)
ld[ld$dist>100,]
ld[which(ld$dist>100),1]
ld[which(ld$dist>100),]
ld[which(ld$dist>100)[1],]
ld[which(ld$dist>100),2]
which(ld$dist>100)
ld[177002]
ld[177002,]
ld$BP_A[177002]
orild <- read_table2('/Users/qingyao/Downloads/test/plink 2.ld')
orild$BP_A[177002]
orild[177002,]
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 100, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 10, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 200, title = 'LD decay All')
ld <- read_table2("ALL.maf.ld")
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2("han.maf.ld")
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay Han Chinese')
ld <- read_table2('/Users/qingyao/Downloads/test/han.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/han.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink 2.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
rm(ld2)
rm(orild)
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
hist(ld$BP_A)
hist(ld$BP_B)
ld <- filter(ld,BP_A<BP_B)
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
ld <- ld %>% arrange(R2)
ld$dist <- ld$BP_B-ld$BP_A
ld$distc <- cut(ld$dist,breaks=seq(from=min(ld$dist),to=max(ld$dist),length.out =avgwin))
ld <- ld %>% group_by(distc) %>% summarise(dist=mean(dist),R2=mean(R2))
ld <- read_table2('/Users/qingyao/Downloads/test/plink.ld')
ld$BP_A <- ld$BP_A/1000
ld$BP_B <- ld$BP_B/1000
ld <- ld %>% arrange(R2)
ld$dist <- ld$BP_B-ld$BP_A
hist(ld$dist)
range(ld$BP_A)
ld$X8 <- NULL
ld$dist <- ld$BP_B - ld$BP_A
ld$mid <- (ld$BP_A + ld$BP_B)/2
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay sibling')
ld <- read_table2("sibling.ld")
ld$X8 <- NULL
ld$dist <- ld$BP_B - ld$BP_A
ld$mid <- (ld$BP_A + ld$BP_B)/2
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay sibling')
ld <- read_table2("ALL.maf.ld")
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
pdf('out/ALL.maf.ld.pdf', width = 18, height = 5)
ld <- ld %>% filter(BP_A > start  & BP_A < end  & ld$BP_B > start  & ld$BP_B < end )
start
start = 2 * 10^6
end = 3 * 10^6
ld <- read_table2("ALL.maf.ld")
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay All')
ld <- ld %>% filter(BP_A > start  & BP_A < end  & ld$BP_B > start  & ld$BP_B < end )
plotPairwiseLD(ld ,ylim=c(0,300), xbreaks = 10, title = 'LD plot All') #,minr2=0.2
ld <- read_table2("han.maf.ld")
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay Han Chinese')
ld <- read_table2("han.maf.ld")
plotDecayLD(ld,xlim = c(0,100), ylim = c(0,1), avgwin = 80, title = 'LD decay Han Chinese')
ld <- ld %>% filter(BP_A > start  & BP_A < end  & ld$BP_B > start  & ld$BP_B < end )
plotPairwiseLD(ld ,ylim=c(0,300), xbreaks = 10,  title = 'LD plot Han Chiense') #,minr2=0.2
